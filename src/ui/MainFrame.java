/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui;

import chart.ChartDatastore;
import config.StaticInitConfig;
import graphAnalysisAPI.GraphAPI;
import graphAnalysisAPI.GraphAPI.GraphAPIobjectFactory;
import java.util.List;
import java.util.Timer;
import java.util.TimerTask;
import java.util.concurrent.atomic.AtomicInteger;
import javax.swing.DefaultListModel;
import javax.swing.JFrame;
import javax.swing.JSplitPane;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import world.model.Threat;

/**
 *
 * @author boluo
 */
public class MainFrame extends javax.swing.JFrame {
    
    public static AtomicInteger CURRENT_SIMULATION_TIME = new AtomicInteger(0);
    public final static ChartDatastore chartDatastore = new ChartDatastore();

    private final DefaultListModel listModel;
    private final GraphAPI graphAPI;
    /**
     * Creates new form MainFrame
     */
    public MainFrame() 
    {
        this.listModel = new DefaultListModel();
        initComponents();
        graphAPI = GraphAPIobjectFactory.createGraphAPIobject(animationPanel1);
        this.animationPanel1.start();
        invokeAnalysisDataCollection();
        initiateThreatsInList();
    }
    
    /**
     * Handles printing all threats in the world in the JList swing UI control object
     */
    private void initiateThreatsInList()
    {
        SimulationComponentsUIx.jList_threats.setModel(listModel);
        Timer timer = new Timer();
        timer.schedule(new TimerTask()
        {
            
            @Override
            public void run() 
            {
                List<Threat> threats = animationPanel1.getWorld().getControl_center().getThreats();
                for(Threat threat : threats)
                {
                    if(!listModel.contains(threat)) {
                        listModel.addElement(threat);
                    }
                }
                                
                SimulationComponentsUIx.jList_threats.addListSelectionListener(new ListSelectionListener() {

                    @Override
                    public void valueChanged(ListSelectionEvent e) 
                    {
                        final Threat selThreat = (Threat)SimulationComponentsUIx.jList_threats.getSelectedValue();
                        graphAPI.setSelectedTask(selThreat);

                    }
                });
            }
        }, 1000, 1000);        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane1 = new javax.swing.JSplitPane();
        rightControlPanel1 = new ui.RightControlPanel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setExtendedState(JFrame.MAXIMIZED_BOTH);
        setMinimumSize(new java.awt.Dimension(1000, 603));

        jSplitPane1.setDividerLocation(1700);
        jSplitPane1.setDividerSize(5);
        jSplitPane1.setMaximumSize(null);
        jSplitPane1.setMinimumSize(new java.awt.Dimension(1300, 985));
        jSplitPane1.setPreferredSize(new java.awt.Dimension(1300, 985));
        this.animationPanel1=new AnimationPanel();

        this.jSplitPane1.add(animationPanel1,  JSplitPane.LEFT);

        rightControlPanel1.setMaximumSize(new java.awt.Dimension(150, 630));
        rightControlPanel1.setMinimumSize(new java.awt.Dimension(150, 630));
        rightControlPanel1.setPreferredSize(new java.awt.Dimension(150, 630));
        jSplitPane1.setRightComponent(rightControlPanel1);

        jMenu1.setText("View");

        jMenuItem1.setText("Broadcast chart");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem2.setText("Broadcast total chart");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuItem3.setText("Info sharing chart");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem3);

        jMenuItem4.setText("Info sharing totoal chart");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem4);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        SwingUtilities.invokeLater(new Runnable() {

            @Override
            public void run() {
                AnalysisBarChart analysisChart = new AnalysisBarChart(StaticInitConfig.BROADCAST_INFOSHARE, "Broadcast");
                analysisChart.setVisible(true);
            }
        });
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        SwingUtilities.invokeLater(new Runnable() {

            @Override
            public void run() {
                AnalysisUI_LineChart analysisChart = new AnalysisUI_LineChart(StaticInitConfig.BROADCAST_INFOSHARE, "Broadcast");
                analysisChart.setVisible(true);
            }
        });
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        SwingUtilities.invokeLater(new Runnable() {

            @Override
            public void run() {
                AnalysisBarChart analysisChart = new AnalysisBarChart(StaticInitConfig.REGISTER_BASED_INFORSHARE, "Information Sharing");
                analysisChart.setVisible(true);
            }
        });
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        SwingUtilities.invokeLater(new Runnable() {

            @Override
            public void run() {
                AnalysisUI_LineChart analysisChart = new AnalysisUI_LineChart(StaticInitConfig.REGISTER_BASED_INFORSHARE, "Information sharing");
                analysisChart.setVisible(true);
            }
        });
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    public static void showMainFrame()
    {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            javax.swing.UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        showMainFrame();
    }
    
    private void invokeAnalysisDataCollection() {
        //For chartdata processes per second
        Timer timer2 = new Timer();
        timer2.schedule(new TimerTask() {
            
            @Override
            public void run() {
                int current_simulation_time
                        = CURRENT_SIMULATION_TIME.incrementAndGet();
                System.out.println("Current simulation timestep: "+current_simulation_time);
                chartDatastore.putBroadcastRecord(CURRENT_SIMULATION_TIME.get(), 0);
                chartDatastore.putRegisterInfoShareRecord(CURRENT_SIMULATION_TIME.get(), 0);
            }
        }, 1000, 1000);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JSplitPane jSplitPane1;
    private AnimationPanel animationPanel1;
    private ui.RightControlPanel rightControlPanel1;
    // End of variables declaration//GEN-END:variables
}
